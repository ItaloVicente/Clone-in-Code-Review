    private Button okButton;

    private Label variableNameLabel;

    private Label variableValueLabel;

    private Label variableResolvedValueLabel;

    private Text variableNameField;

    private Text variableValueField;

    private Label variableResolvedValueField;

    private Button fileButton;

    private Button folderButton;

    private Button variableButton;
    /**
     * This dialog type: <code>NEW_VARIABLE</code> or
     * <code>EXISTING_VARIABLE</code>.
     */
    private int type;

    /**
     * The type of variable that can be edited in this dialog.
     * <code>IResource.FILE</code> or <code>IResource.FOLDER</code>
     */
    private int variableType;

    /**
     * The name of the variable being edited.
     */
    private String variableName;

    /**
     * The value of the variable being edited.
     */
    private String variableValue;

    /**
     * The original name of the variable being edited. It is used when testing
     * if the current variable's name is already in use.
     */
    private String originalName;

    /**
     * Used to select the proper message depending on the current mode
     * (new/existing variable).
     */
    private int operationMode = 0;

    /**
     * Reference to the path variable manager. It is used for validating
     * variable names.
     */
    private IPathVariableManager pathVariableManager;

    /**
     * Set of variable names currently in use. Used when warning the user that
     * the currently selected name is already in use by another variable.
     */
    private Set namesInUse;

    /**
     * The current validation status. Its value can be one of the following:<ul>
     * <li><code>IMessageProvider.NONE</code> (default);</li>
     * <li><code>IMessageProvider.WARNING</code>;</li>
     * <li><code>IMessageProvider.ERROR</code>;</li>
     * </ul>
     * Used when validating the user input.
     */
    private int validationStatus;

    /**
     * The current validation message generated by the last
     * call to a <code>validate</code> method.
     */
    private String validationMessage;

    /**
     * Whether a variable name has been entered.
     */
    private boolean nameEntered = false;

    /**
     * Whether a variable location has been entered.
     */
    private boolean locationEntered = false;

    /**
     * The standard message to be shown when there are no problems being
     * reported.
     */
    final private String standardMessage;

    /**
     * Constant for defining this dialog as intended to create a new variable
     * (value = 1).
     */
    public static final int NEW_VARIABLE = 1;

    /**
     * Constant for defining this dialog as intended to edit an existing
     * variable (value = 2).
     */
    public static final int EXISTING_VARIABLE = 2;

    /**
     * Constant for defining this dialog as intended to edit an existing link
     * location (value = 3).
     */
    public static final int EDIT_LINK_LOCATION = 3;

    private IResource currentResource = null;

    /**
     * Constructs a dialog for editing a new/existing path variable.
     *
     * @param parentShell the parent shell
     * @param type the dialog type: <code>NEW_VARIABLE</code> or
     * 	<code>EXISTING_VARIABLE</code>
     * @param variableType the type of variable that can be edited in
     * 	this dialog. <code>IResource.FILE</code> or <code>IResource.FOLDER</code>
     * @param pathVariableManager a reference to the path variable manager
     * @param namesInUse a set of variable names currently in use
     */
    public PathVariableDialog(Shell parentShell, int type, int variableType,
            IPathVariableManager pathVariableManager, Set namesInUse) {
        super(parentShell);
        this.type = type;
        this.operationMode = type;
        this.variableType = variableType;
        this.pathVariableManager = pathVariableManager;
        this.namesInUse = namesInUse;

        if (operationMode == NEW_VARIABLE)
            this.standardMessage = IDEWorkbenchMessages.PathVariableDialog_message_newVariable;
        else if (operationMode == EXISTING_VARIABLE)
            this.standardMessage = IDEWorkbenchMessages.PathVariableDialog_message_existingVariable;
        else
            this.standardMessage = IDEWorkbenchMessages.PathVariableDialog_message_editLocation;
    }

    /**
     * Configures this dialog's shell, setting the shell's text.
     *
     * @see org.eclipse.jface.window.Window#configureShell(Shell)
     */
    @Override
