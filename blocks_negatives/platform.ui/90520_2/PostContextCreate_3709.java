/*******************************************************************************
 * Copyright (c) 2009, 2016 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *     Lars Vogel <Lars.Vogel@vogella.com> - Bug 472654
 ******************************************************************************/
package org.eclipse.e4.ui.workbench;

import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.e4.core.contexts.IEclipseContext;
import org.eclipse.e4.core.services.events.IEventBroker;
import org.eclipse.e4.ui.model.application.MApplication;
import org.eclipse.e4.ui.model.application.MApplicationElement;
import org.eclipse.e4.ui.model.application.ui.MUIElement;
import org.eclipse.e4.ui.model.internal.ModelUtils;
import org.osgi.service.event.Event;

/**
 * E4 UI events and event topic definitions.
 *
 * This file contains generated and hand crafted event topic constants. There are also hand crafted
 * utility methods for constructing topic strings and publishing events.
 *
 * When the UI model changes org.eclipse.e4.ui.internal.workbench.swt.GenTopic should be run as an
 * Eclipse application and the console results should be pasted into this file replacing the code
 * below the "Place Generated Code Here" comment
 *
 * @noextend This class is not intended to be subclassed by clients.
 * @noinstantiate This class is not intended to be instantiated by clients.
 * @since 1.0
 */
public class UIEvents {

	/**
	 * Topic separator character
	 */

	/**
	 * Wild card character for matching all sub topics
	 */

	/**
	 * Base name of all E4 UI events
	 */

	/**
	 * Name element for all E4 UI model events (these are generated by GenTopic)
	 */

	/**
	 * Name element for E4 Renderer events
	 *
	 * @since 1.1
	 */

	/**
	 * Event sent when a enabled update is requested for tool-items.
	 * <p>
	 * As a value you may pass in to the {@link IEventBroker#DATA}:
	 * <ul>
	 * <li>the special value {@link #ALL_ELEMENT_ID} to request changes of all
	 * applicable elements (the default)</li>
	 * <li>the {@link MApplicationElement#getElementId()} of the element to
	 * check</li>
	 * <li>instance of {@link Selector}</li>
	 * </ul>
	 * </p>
	 *
	 * @since 1.1
	 */
	public static final String REQUEST_ENABLEMENT_UPDATE_TOPIC = UIRendererTopicBase

	/**
	 * Special id passed to force all elements to be checked
	 *
	 * @since 1.1
	 */

	/**
	 * E4 UI Event Types. Add appropriate utility is<Test> method below if new types added
	 */
	public static interface EventTypes {
		/**
		 * Creation event
		 */
		/**
		 * Set event
		 */
		/**
		 * Add event: value added is {@link EventTags#NEW_VALUE}.
		 *
		 * @see UIEvents#isADD(Event)
		 */
		/**
		 * Add many items: values added are {@link EventTags#NEW_VALUE}
		 *
		 * @see UIEvents#isADD(Event)
		 */
		/**
		 * Remove event: value removed is {@link EventTags#OLD_VALUE}
		 *
		 * @see UIEvents#isREMOVE(Event)
		 */
		/**
		 * Remove many event: the values removed are the {@link EventTags#OLD_VALUE} (a collection).
		 * The former positions of the removed values are provided as an integer array in
		 * {@link EventTags#POSITION}.
		 *
		 * @see UIEvents#isREMOVE(Event)
		 */
		/**
		 * Value moved: the value moved is the {@link EventTags#NEW_VALUE}, the old position is
		 * {@link EventTags#OLD_VALUE}, and the new position in {@link EventTags#POSITION}.
		 */
	}

	/**
	 * @param event
	 *            An OSGI event representing a UIEvent
	 * @return true if it is an add event (i.e., {@link EventTypes#ADD} or
	 *         {@link EventTypes#ADD_MANY}), or false otherwise.
	 * @see UIEvents.EventTags#NEW_VALUE
	 * @see #asIterable(Event, String)
	 */
	public static boolean isADD(Event event) {
		Object type = event.getProperty(UIEvents.EventTags.TYPE);
		return UIEvents.EventTypes.ADD.equals(type) || UIEvents.EventTypes.ADD_MANY.equals(type);
	}

	/**
	 * @param event
	 *            An OSGI event representing a UIEvent
	 * @return true if it is a remove event (i.e., {@link EventTypes#REMOVE} or
	 *         {@link EventTypes#REMOVE_MANY}), or false otherwise.
	 * @see UIEvents.EventTags#OLD_VALUE
	 * @see #asIterable(Event, String)
	 */
	public static boolean isREMOVE(Event event) {
		Object type = event.getProperty(UIEvents.EventTags.TYPE);
		return UIEvents.EventTypes.REMOVE.equals(type)
				|| UIEvents.EventTypes.REMOVE_MANY.equals(type);
	}

	/**
	 * @param event
	 *            An OSGI event representing a UIEvent
	 * @return true if it is a set event, false otherwise.
	 */
	public static boolean isSET(Event event) {
		return UIEvents.EventTypes.SET.equals(event.getProperty(UIEvents.EventTags.TYPE));
	}

	/**
	 * @param event
	 *            An OSGI event representing a UIEvent
	 * @return true if it is a create event, false otherwise.
	 */
	public static boolean isCREATE(Event event) {
		return UIEvents.EventTypes.CREATE.equals(event.getProperty(UIEvents.EventTags.TYPE));
	}

	/**
	 * Return true if the specified property contains {@code o}. Intended as a helper function for
	 * {@link EventTypes#ADD}, {@link EventTypes#ADD_MANY}, {@link EventTypes#REMOVE}, and
	 * {@link EventTypes#REMOVE_MANY}. If the property is not a container (e.g., a collection or
	 * array), then return true then if {@code container} is equal to {@code o}.
	 *
	 * @param event
	 *            the event
	 * @param propertyName
	 *            the property name
	 * @param o
	 *            the object to check for containment
	 * @return true if the property value contains {@code o} or is equal to {@code o}
	 */
	public static boolean contains(Event event, String propertyName, Object o) {
		Object container = event.getProperty(propertyName);
		if (container == null) {
			return false;
		} else if (container instanceof Collection<?> && ((Collection<?>) container).contains(o)) {
			return true;
		} else if (container instanceof Object[]) {
			for (Object element : (Object[]) container) {
				if (o.equals(element)) {
					return true;
				}
			}
		}
		return o.equals(container);
	}

	/**
	 * Return the provided event property as an iterable. If already a collection, return the
	 * collection.
	 *
	 * @param event
	 *            the event object
	 * @param propertyName
	 *            the name of the property
	 * @return an iterable collection over the property elements
	 */
	public static Iterable<?> asIterable(Event event, String propertyName) {
		Object o = event.getProperty(propertyName);
		return o instanceof Collection<?> ? (Collection<?>) o : Collections.singleton(o);
	}

	/**
	 * E4 UI Event argument attribute keys. These are used as keys for the event arguments map. Each
	 * event may have none, some, or all arguments set.
	 */
	public static interface EventTags {
		/**
		 * The element that caused the event to be published
		 */
		/**
		 * The widget that generated the event
		 */
		/**
		 * The event type @see UIEvents.EventTypes
		 */
		/**
		 * The attribute name
		 */
		/**
		 * The old value
		 */
		/**
		 * The new value
		 */
		/**
		 * The position (if applicable) of the change within the list.
		 */
	}

	/**
	 * E4 UI life cycle events. These events are explicitly published by specific operations. They
	 * are not directly generated by UI model changes.
	 */
	public static interface UILifeCycle {
		/**
		 * Base name for all UI life cycle events
		 */

		/**
		 * Sent when a UIElement is brought to top
		 */

		/**
		 * Sent when an MPart is activated
		 */

		/**
		 * Sent when a perspective is saved
		 */

		/**
		 * Sent when a perspective is opened
		 */

		/**
		 * Sent when a perspective is reset
		 *
		 * @since 1.2
		 */

		/**
		 * Sent when application startup is complete
		 */
		/**
		 * Sent when application shutdown is starting
		 *
		 * @since 1.1
		 */

		/**
		 * Sent when the theme is changed
		 *
		 * @since 1.1
		 */

		/**
		 * Sent when the theme definition is changed
		 *
		 * @since 1.1
		 */
		public static final String THEME_DEFINITION_CHANGED = TOPIC + TOPIC_SEP
	}

	/**
	 * Publish the topic to the changedElements global event bus. The changedElement is added the
	 * the EventTags.ELEMENT tag.
	 *
	 * @param topic
	 *            to broadcast
	 * @param changedElement
	 *            the element that changed
	 * @return true if the event is published correctly, false otherwise
	 */
	public static boolean publishEvent(String topic, MUIElement changedElement) {
		if (topic == null || topic.length() == 0 || changedElement == null)
			return false;

		Map<String, Object> argMap = new HashMap<>(1);
		argMap.put(EventTags.ELEMENT, changedElement);
		return publishEvent(topic, argMap);
	}

	/**
	 * Publish the topic with the provided arguments to the global event bus. argMap MUST contain an
	 * EventTags.ELEMENT argument that is an MUIElement. the contained MUIElement will be used to
	 * determine the event bus to publish to.
	 *
	 * @param topic
	 *            to broadcast
	 * @param argMap
	 *            arguments map with a minimum of a changedElement
	 * @return true if the event is published correctly, false otherwise
	 */
	public static boolean publishEvent(String topic, Map<String, Object> argMap) {
		if (topic == null || topic.length() == 0 || argMap == null)
			return false;

		Object uiElement = argMap.get(EventTags.ELEMENT);
		if (uiElement == null || !(uiElement instanceof MUIElement))
			return false;

		IEclipseContext context = uiElement instanceof MApplication ? ((MApplication) uiElement)
				.getContext() : ModelUtils.getContainingContext((MUIElement) uiElement);
		if (context == null)
			return false;

		IEventBroker eventBroker = context.get(IEventBroker.class);
		if (eventBroker == null)
			return false;

		return eventBroker.send(topic, argMap);
	}

	@SuppressWarnings("javadoc")
	@Deprecated
	/**
	 * @deprecated Subscribe to an all attribute events on a topic using the TOPIC_ALL constant directly
	 */
	public static String buildTopic(String topic) {
		return topic + TOPIC_SEP + ALL_SUB_TOPICS;
	}

	@SuppressWarnings("javadoc")
	@Deprecated
	/**
	 * @deprecated Subscribe to an attribute event by using the TOPIC_<attribute> constant directly
	 */
	public static String buildTopic(String topic, String attrName) {
		return topic + TOPIC_SEP + attrName + TOPIC_SEP + ALL_SUB_TOPICS;
	}

	@SuppressWarnings("javadoc")
	@Deprecated
	/**
	 * @deprecated Subscribing to a particular event type on a topic attribute is not longer supported
	 */
	public static String buildTopic(String topic, String attrName, String eventType) {
		return topic + TOPIC_SEP + attrName + TOPIC_SEP + eventType;
	}

	/*************************************************************************************
	 * GENERATED CODE!!
	 *
	 * NOTE: *All* non-generated code must be above this comment.
	 *
	 * Replace the generated code below this comment with the output of GenTopic.
	 *
	 *************************************************************************************/

	@SuppressWarnings("javadoc")
	public static interface BindingContext {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface BindingTable {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface BindingTableContainer {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface Bindings {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface Category {


		@Deprecated


		/**
		 * @since 1.1
		 */


		/**
		 * @since 1.1
		 */
	}

	@SuppressWarnings("javadoc")
	public static interface Command {


		@Deprecated


		/**
		 * @since 1.1
		 */
		/**
		 * @since 1.1
		 */


		/**
		 * @since 1.1
		 */
		/**
		 * @since 1.1
		 */
	}

	@SuppressWarnings("javadoc")
	public static interface CommandParameter {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface Handler {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface HandlerContainer {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface KeyBinding {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface KeySequence {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface Parameter {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface PartDescriptor {


		@Deprecated


		/**
		 * @since 1.1
		 */


		/**
		 * @since 1.1
		 */
	}

	@SuppressWarnings("javadoc")
	public static interface PartDescriptorContainer {


		@Deprecated


	}

	/**
	 * @since 1.1
	 */
	@SuppressWarnings("javadoc")
	public static interface Application {


		@Deprecated

		/**
		 * @since 1.1
		 */

		/**
		 * @since 1.1
		 */
	}

	@SuppressWarnings("javadoc")
	public static interface ApplicationElement {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface Contribution {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface StringToObjectMap {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface StringToStringMap {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface Perspective {


		@Deprecated

		/**
		 * @since 1.5
		 */

	}

	@SuppressWarnings("javadoc")
	public static interface Placeholder {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface Part {


		@Deprecated

		/**
		 * @since 1.5
		 */

		/**
		 * @since 1.1
		 */


		/**
		 * @since 1.1
		 */
	}

	/**
	 * @since 1.1
	 */
	@SuppressWarnings("javadoc")
	public static interface TrimBar {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface TrimmedWindow {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface Window {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface Context {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface CoreExpression {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface Dirtyable {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface ElementContainer {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface GenericTile {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface GenericTrimContainer {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface Input {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface SnippetContainer {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface UIElement {


		@Deprecated


		/**
		 * @since 1.1
		 */


		/**
		 * @since 1.1
		 */
	}

	@SuppressWarnings("javadoc")
	public static interface UILabel {


		@Deprecated


		/**
		 * @since 1.1
		 */
		/**
		 * @since 1.1
		 */


		/**
		 * @since 1.1
		 */
		/**
		 * @since 1.1
		 */
	}

	@SuppressWarnings("javadoc")
	public static interface HandledItem {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface Item {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface Menu {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface MenuContribution {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface MenuContributions {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface MenuElement {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface OpaqueMenuItem {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface OpaqueMenuSeparator {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface OpaqueToolItem {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface RenderedMenu {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface RenderedMenuItem {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface RenderedToolBar {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface ToolBarContribution {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface ToolBarContributions {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface ToolItem {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface TrimContribution {


		@Deprecated


	}

	@SuppressWarnings("javadoc")
	public static interface TrimContributions {


		@Deprecated


	}
}
