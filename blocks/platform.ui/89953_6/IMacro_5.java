package org.eclipse.e4.core.macros.internal;

import java.io.UnsupportedEncodingException;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.eclipse.core.runtime.Assert;
import org.eclipse.e4.core.macros.Activator;
import org.eclipse.e4.core.macros.IMacroCommand;
import org.eclipse.e4.core.macros.IMacroCommandFactory;
import org.eclipse.e4.core.macros.IMacroPlaybackContext;


	private Map<String, IMacroCommandFactory> fCommandIdToFactory;

	private List<IMacroCommand> fMacroCommands = new LinkedList<IMacroCommand>() {

		private static final long serialVersionUID = -7612234404927667052L;

		@Override
		public IMacroCommand get(int index) {
			throw new RuntimeException(
					"get is slow and should not be used on LinkedList. If this is needed, switch to a different implementation."); //$NON-NLS-1$
		}
	};

	public ComposableMacro(Map<String, IMacroCommandFactory> commandIdToFactory) {
		fCommandIdToFactory = commandIdToFactory;
	}

	public void addMacroCommand(IMacroCommand macroCommand) {
		if (fCommandIdToFactory != null && !fCommandIdToFactory.containsKey(macroCommand.getId())) {
			throw new RuntimeException(
					String.format("Command: %s not properly registered through a %s extension point.", //$NON-NLS-1$
							macroCommand.getId(), MacroContextImplementation.MACRO_COMMAND_EXTENSION_POINT));
		}
		fMacroCommands.add(macroCommand);
	}

	@Override
	public void playback(IMacroPlaybackContext macroPlaybackContext) throws Exception {
		for (IMacroCommand macroCommand : fMacroCommands) {
			macroCommand.execute(macroPlaybackContext);
		}
	}

	@Override
	public void setCommandIdToFactory(Map<String, IMacroCommandFactory> commandIdToFactory) {
		this.fCommandIdToFactory = commandIdToFactory;
	}

		final StringBuilder buf = new StringBuilder(this.fMacroCommands.size() * 60);

		buf.append("// Macro generated by the Eclipse macro record engine.\n"); //$NON-NLS-1$
		buf.append("// The runMacro() function will be later run by the macro engine.\n"); //$NON-NLS-1$
		buf.append("function runMacro(){\n"); //$NON-NLS-1$

		for (IMacroCommand command : this.fMacroCommands) {
			Map<String, String> map = command.toMap();
			Assert.isNotNull(map);

			buf.append("    runCommand("); //$NON-NLS-1$
			buf.append(JSONHelper.quote(command.getId()));
			buf.append(", "); //$NON-NLS-1$
			buf.append(JSONHelper.toJSon(map));
			buf.append(");\n"); //$NON-NLS-1$
		}
		buf.append("}\n"); //$NON-NLS-1$

		try {
			return buf.toString().getBytes("UTF-8"); //$NON-NLS-1$
		} catch (UnsupportedEncodingException e) {
			Activator.log(e);
			throw new RuntimeException(e);
		}
	}
}
