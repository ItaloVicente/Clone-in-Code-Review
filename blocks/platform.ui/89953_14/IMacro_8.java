package org.eclipse.e4.core.macros.internal;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.eclipse.core.runtime.Assert;
import org.eclipse.e4.core.macros.Activator;
import org.eclipse.e4.core.macros.IMacroInstruction;
import org.eclipse.e4.core.macros.IMacroInstructionFactory;
import org.eclipse.e4.core.macros.IMacroPlaybackContext;


	private Map<String, IMacroInstructionFactory> fMacroInstructionIdToFactory;

	private List<IMacroInstruction> fMacroInstructions = new ArrayList<>();

	private static class IndexAndPriority {

		private final int fIndex;
		private final int fPriority;

		private IndexAndPriority(int index, int priority) {
			this.fIndex = index;
			this.fPriority = priority;
		}

	}

	private Map<Object, IndexAndPriority> fEventToPlacement = new HashMap<>();

	public ComposableMacro(Map<String, IMacroInstructionFactory> macroInstructionIdToFactory) {
		fMacroInstructionIdToFactory = macroInstructionIdToFactory;
	}

	private void checkMacroInstruction(IMacroInstruction macroInstruction) {
		if (fMacroInstructionIdToFactory != null
				&& !fMacroInstructionIdToFactory.containsKey(macroInstruction.getId())) {
			throw new RuntimeException(String.format(
					"Macro instruction: %s not properly registered through a %s extension point.", //$NON-NLS-1$
					macroInstruction.getId(), MacroServiceImplementation.MACRO_INSTRUCTION_FACTORY_EXTENSION_POINT));
		}
	}

	public void addMacroInstruction(IMacroInstruction macroInstruction) {
		checkMacroInstruction(macroInstruction);
		fMacroInstructions.add(macroInstruction);
	}

	public boolean addMacroInstruction(IMacroInstruction macroInstruction, Object event, int priority) {
		Assert.isNotNull(event);
		IndexAndPriority currentIndexAndPriority = this.fEventToPlacement.get(event);
		if (currentIndexAndPriority == null) {
			this.addMacroInstruction(macroInstruction);
			this.fEventToPlacement.put(event, new IndexAndPriority(this.fMacroInstructions.size() - 1, priority));
			return true;
		}
		if (priority >= currentIndexAndPriority.fPriority) {
			checkMacroInstruction(macroInstruction);
			fMacroInstructions.set(currentIndexAndPriority.fIndex, macroInstruction);
			this.fEventToPlacement.put(event, new IndexAndPriority(currentIndexAndPriority.fIndex, priority));
			return true;
		}
		return false;
	}

	public void clearCachedInfo() {
		this.fEventToPlacement.clear();
	}

	@Override
	public void playback(IMacroPlaybackContext macroPlaybackContext) throws Exception {
		for (IMacroInstruction macroInstruction : fMacroInstructions) {
			macroInstruction.execute(macroPlaybackContext);
		}
	}

		final StringBuilder buf = new StringBuilder(this.fMacroInstructions.size() * 60);

		buf.append("// Macro generated by the Eclipse macro record engine.\n"); //$NON-NLS-1$
		buf.append("// The runMacro() function will be later run by the macro engine.\n"); //$NON-NLS-1$
		buf.append("function runMacro(){\n"); //$NON-NLS-1$

		for (IMacroInstruction macroInstruction : this.fMacroInstructions) {
			Map<String, String> map = macroInstruction.toMap();
			Assert.isNotNull(map);

			buf.append("    runMacroInstruction("); //$NON-NLS-1$
			buf.append(JSONHelper.quote(macroInstruction.getId()));
			buf.append(", "); //$NON-NLS-1$
			buf.append(JSONHelper.toJSon(map));
			buf.append(");\n"); //$NON-NLS-1$
		}
		buf.append("}\n"); //$NON-NLS-1$

		try {
			return buf.toString().getBytes("UTF-8"); //$NON-NLS-1$
		} catch (UnsupportedEncodingException e) {
			Activator.log(e);
			throw new RuntimeException(e);
		}
	}
}
